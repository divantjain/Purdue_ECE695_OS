// A simple example showing memory protection under paging is
// at the granularity of a page

#include <stdio.h>
#include <sys/time.h>

int main()
{
  int i, *p1, *p2, *p3, *p4;

  // ----------------------------------------------------------
  // this shows the current top of the heap is not page aligned
  if ((p1 = (int *) malloc(4)) != NULL) {
    printf("malloc(4):  p1 = %p in page %p\n", p1, ((int) p1>>12)<<12);

    *p1 = 7777;
    *(p1+8) = 8888;
    printf("Can write to p1=%p  *p1 = %d  (p1+8)=%p  *(p1+8) = %d \n", p1, *p1, (int *)(p1+8),*(p1+8));
    free(p1);
    printf("Freed    p1 @ %p...\n\n",p1);
  }

//   (int *) p1 = (((int)p1>>12)<<12) + 1024;
//   *p1 = 9999;
//   printf("In fact can write to     p1 @ %p   *p1 = %d\n\n", p1, *p1);

  // after mallocing something big --> force page alignment
  if ((p1 = (int *) malloc(4096)) != NULL) {
    printf("malloc(4096):  p1 = %p in page %p\n", p1, ((int) p1>>12)<<12);
    free(p1);
    printf("Freed p1 at %p....\n", p1);
  }

   *p1 =666;
   printf("But can write to p1 @ %p   *p1 = %d\n", p1, *p1);

   (int *) p1 = p1 + 1024; 
   *p1 = 6666;
   printf("Can write to     p1 @ %p   *p1 = %d\n\n", p1, *p1);

//   (int *) p1 = p1 + 1024;
//   *p1 = 66666;
//   printf("Can write to     p1 @ %p   *p1 = %d\n\n", p1, *p1);
 
  // now, what address will this malloc() return?
  if ((p1 = (int *) malloc(4)) != NULL)
    printf("malloc(4) again:  p1=%p in page %p\n", p1, ((int) p1>>12)<<12);

  // what does free() really do?
  free(p1);   *p1 = 9999;
  printf("After free(p1):   p1=%p    *p1 = %d\n\n", p1, *p1);
  
  exit(0);
}


