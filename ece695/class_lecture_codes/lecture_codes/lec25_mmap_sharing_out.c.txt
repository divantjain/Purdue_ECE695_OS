/*
Here is the example of using mmap() to share memory between two processes
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h> /* mmap() is defined in this header */
#include <fcntl.h>
#include <unistd.h>

#define SIZE 512000000

int main (int argc, char *argv[])
{
 int fdin, fdout, i;
 int *src, *dst;
 struct stat statbuf;

 if (argc != 2) { perror("usage: a.out <backing file>"); exit(1);}

 /* open/create the output file */
  if ((fdout = open (argv[1], O_RDWR | O_CREAT | O_TRUNC,  S_IRWXU)) < 0)
   perror ("can't create %s for writing", argv[2]);

 /* go to the location corresponding to the last byte */
 if (lseek (fdout, SIZE - 1, SEEK_SET) == -1)
 perror ("lseek error");
 
 /* write a dummy byte at the last location */
 if (write (fdout, "", 1) != 1) perror ("write error");

  /* mmap the output file */
 if ((dst = mmap (0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fdout, 0))
     == (caddr_t) -1)
   perror ("mmap error for output");
	
 if (fdout != -1) close(fdout);
 
 /* this copies the input file to the output file */

 for (i=0; i < (SIZE>>2)-4; i++)
   dst[i] = i;
 
 exit(0);
} 










